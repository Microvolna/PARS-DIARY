'–ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'

import datetime

import requests
from loguru import logger

from utils.exceptions import UnexpectedStatusCodeError, UserNotAuthenticated
from utils.exceptions import UnknownError, ValidationError, MyTimeoutError
from utils import demo_data


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def request(url: str, user_id: str | int | None = None, cookie: str | None = None) -> dict:
    '–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ url'
    from utils import db

    try:
        # –ü–æ–ª—É—á–∞–µ–º cookie –ø–æ user_id
        if cookie is None and user_id is not None:
            # –ü–æ–ª—É—á–∞–µ–º cookie –∏–∑ json –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cookie = db.get_cookie(user_id)

        if cookie in ['demo', '–¥–µ–º–æ']:
            return 'demo'

        # –û—Ç–ø—Ä–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        headers = {'cookie': cookie}
        r = requests.post(url, headers=headers, timeout=20)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ json
        r_json = r.json()

        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logger.debug(r_json)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä
        if r.status_code != 200:
            raise UnexpectedStatusCodeError(r.status_code)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∞–µ –æ—à–∏–±–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
        elif 'Server.UserNotAuthenticated' in r.text:
            raise UserNotAuthenticated()

        elif 'Client.ValidationError' in r.text:
            raise ValidationError()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        return r_json

    # –ù–∞ —Å–ª—É—á–∞–π –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ –±—ã–≤–∞–µ—Ç)
    except requests.exceptions.Timeout as e:
        raise MyTimeoutError() from e

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    except Exception as e:
        raise UnknownError(e) from e


def check_cookie(cookie: str) -> tuple[bool, str]:
    '–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cookie'
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–≤–µ—Ä—Å–∏—è, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç)
    if cookie == 'demo' or cookie == '–¥–µ–º–æ':
        return True, (
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–¥–Ω–∞–∫–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ '
            '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–ª—è –≤–∞—Å –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'
        )
    else:
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
        if 'sessionid=' not in cookie:
            return False, '–í–∞—à–∏ cookie –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å "sessionid="'
        elif 'sessionid=xxx...' in cookie:
            return False, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä'
        else:
            try:
                # –¢–µ—Å—Ç –ø—É—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
                request('https://es.ciur.ru/api/ProfileService/GetPersonData', cookie=cookie)
                return True, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.'

            except UnexpectedStatusCodeError:
                return False, (
                    '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã cookie, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ '
                    '—É—Å—Ç–∞—Ä–µ–ª–∏ (—Å–µ—Ä–≤–µ—Ä –≤—ã–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç)'
                )


def minify_lesson_title(title: str) -> str:
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤.

    `minify_lesson_title('–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞')`
    >>> '–§–∏–∑-—Ä–∞'
    '''

    a = {
        '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)': '–ê–Ω–≥–ª. –Ø–∑.',
        '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞': '–§–∏–∑-—Ä–∞',
        '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': '–õ–∏—Ç–µ—Ä.',
        '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è': '–¢–µ—Ö–Ω.',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': '–ò–Ω—Ñ–æ—Ä–º.',
        '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': '–û–±—â–µ—Å—Ç–≤.',
        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': '–†—É—Å. –Ø–∑.',
        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '–ú–∞—Ç–µ–º.',
        '–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã': '–û–ë–ó–†',
        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': '–¢–µ–æ—Ä. –í–µ—Ä.',
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç': '–ò–Ω–¥. –ø—Ä.',
        '–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤ "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"': '–§—É–Ω–∫. –ì—Ä.'
    }.get(title)

    if a:
        return a
    else:
        return title


# –ö–ª–∞—Å—Å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
class Pars:
    '–ü–∞—Ä—Å–∏–Ω–≥'
    def me(self, user_id: str | int) -> str:
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'

        url = 'https://es.ciur.ru/api/ProfileService/GetPersonData'
        data = request(url, user_id)

        if data == 'demo':
            return demo_data.me()

        if data['children_persons'] == []:
            # Logged in on children account
            if data['user_is_male']:
                sex = '–ú—É–∂—Å–∫–æ–π'
            else:
                sex = '–ñ–µ–Ω—Å–∫–∏–π'

            return (
                f'–§–ò–û - {data['user_fullname']}\n',
                f'–ü–æ–ª - {sex}\n',
                f'–®–∫–æ–ª–∞ - {data['selected_pupil_school']}\n',
                f'–ö–ª–∞—Å—Å - {data['selected_pupil_classyear']}'
            )

        else:
            # Logged in on parent account
            msg_text = ''

            # Parent data
            msg_text += f"–§–ò–û (—Ä–æ–¥–∏—Ç–µ–ª—è) - {data['user_fullname']}\n"

            # –ù–æ–º–µ—Ä–∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å
            number = data.get('phone')
            if number:
                msg_text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {number}"

            # Children (-s) data
            children_counter = 0

            for i in data['children_persons']:
                children_counter += 1
                name = ' '.join(i['fullname'].split(' ')[0:-1])
                dr = i['fullname'].split(' ')[-1]
                school = i['school']
                classyear = i['classyear']

                msg_text += (
                    f'\n\n{children_counter} —Ä–µ–±–µ–Ω–æ–∫:\n\n'
                    f'–§–ò–û - {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {dr}\n–®–∫–æ–ª–∞ - {school}\n–ö–ª–∞—Å—Å - {classyear}'
                )

            return msg_text

    def cs(self, user_id: str | int) -> str:
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–Ω—ã—Ö —á–∞—Å–∞—Ö'

        url = 'https://es.ciur.ru/api/WidgetService/getClassHours'
        data = request(url, user_id)

        if data == 'demo':
            return demo_data.cs()

        if data == {}:
            return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–Ω—ã—Ö —á–∞—Å–∞—Ö –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç'
        return (
            '–ö–õ–ê–°–°–ù–´–ô –ß–ê–°\n\n',
            f'{data['date']}\n',
            f'{data['begin']}-{data['end']}\n\n',
            f'{data['place']}\n',
            f'{data['theme']}\n'
        )

    def events(self, user_id: str | int) -> str:
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≤–µ–Ω—Ç–∞—Ö'

        url = 'https://es.ciur.ru/api/WidgetService/getEvents'
        data = request(url, user_id)

        if data == 'demo':
            return demo_data.events()

        if str(data) == '[]':
            return '–ö–∞–∂–µ—Ç—Å—è, –∏–≤–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è)'
        else:
            return f'{data}'

    def birthdays(self, user_id: str | int) -> str:
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è'

        url = 'https://es.ciur.ru/api/WidgetService/getBirthdays'
        data = request(url, user_id)

        if data == 'demo':
            return demo_data.birthdays()

        if str(data) == '[]':
            return '–ö–∞–∂–µ—Ç—Å—è, –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è)'
        else:
            return f"{data[0]['date'].replace('-', ' ')}\n{data[0]['short_name']}"

    def marks(self, user_id: str | int) -> str:
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö'

        url = (
            'https://es.ciur.ru/api/MarkService/GetSummaryMarks?'
            f'date={datetime.datetime.now().date()}'
        )
        data = request(url, user_id)

        if data == 'demo':
            return demo_data.marks()

        msg_text = ''

        if data['discipline_marks'] == []:
            return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π('

        for subject in data['discipline_marks']:
            marks = []
            g = minify_lesson_title(subject['discipline'])

            while len(g) < 10:
                g += ' '

            for i in subject['marks']:
                marks.append(i['mark'])

            if subject['average_mark'] == '':
                average_mark = '0.00'
            else:
                average_mark = subject['average_mark']

            if float(average_mark) >= 4.5:
                color_mark = 'üü©'
            elif float(average_mark) >= 3.5:
                color_mark = 'üü®'
            elif float(average_mark) >= 2.5:
                color_mark = 'üüß'
            else:
                color_mark = 'üü•'

            msg_text += f"{color_mark} {g}‚îÇ {average_mark} ‚îÇ {' '.join(marks)}\n"

        return f'–û—Ü–µ–Ω–∫–∏:\n\n<pre>\n{msg_text}</pre>'

    def i_marks(self, user_id: str | int) -> str:
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö'

        url = 'https://es.ciur.ru/api/MarkService/GetTotalMarks'
        data = request(url, user_id)

        if data == 'demo':
            return demo_data.i_marks()

        msg_text = (
            '–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏:\n\n1-4 - –ß–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏\n–ì - –ì–æ–¥–æ–≤–∞—è\n'
            '–≠ - –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è (–µ—Å–ª–∏ –µ—Å—Ç—å)\n–ò - –ò—Ç–æ–≥–æ–≤–∞—è\n\n<pre>\n'
            '–ü—Ä–µ–¥–º–µ—Ç    ‚îÇ 1 ‚îÇ 2 ‚îÇ 3 ‚îÇ 4 ‚îÇ –ì ‚îÇ –≠ ‚îÇ –ò ‚îÇ\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚î§\n'
        )

        if data['discipline_marks'] == []:
            return (
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n'
                '–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π('
            )

        for discipline in data['discipline_marks']:
            stroka = ['-', '-', '-', '-', '-', '-', '-']
            g = minify_lesson_title(discipline['discipline'])

            while len(g) < 10:
                g += ' '

            msg_text += f"{g} ‚îÇ "

            for period_mark in discipline['period_marks']:
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è subperiod_code —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
                subperiod_index = {
                    '1_1': 0,  # 1 —á–µ—Ç–≤–µ—Ä—Ç—å
                    '1_2': 1,  # 2 —á–µ—Ç–≤–µ—Ä—Ç—å
                    '1_3': 2,  # 3 —á–µ—Ç–≤–µ—Ä—Ç—å
                    '1_4': 3,  # 4 —á–µ—Ç–≤–µ—Ä—Ç—å
                    '4_1': 4,  # –ì–æ–¥–æ–≤–∞—è
                    '4_2': 5,  # –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    '4_3': 6  # –ò—Ç–æ–≥–æ–≤–∞—è
                }

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if period_mark['subperiod_code'] in subperiod_index:
                    stroka[subperiod_index[period_mark['subperiod_code']]] = period_mark['mark']

            msg_text += f"{' ‚îÇ '.join(stroka)}"

            msg_text += ' ‚îÇ\n'

        return f'{msg_text}</pre>'
