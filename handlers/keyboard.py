from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from utils import db, hw

router = Router(name=__name__)

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def callback(call: CallbackQuery) -> None:
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if 'n_n' in call.data:
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if db.swith_notify(call.from_user.id):
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å', callback_data='n_n')]])
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –í–∫–ª—é—á–∏—Ç—å', callback_data='n_n')]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text('üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫</b>', parse_mode='HTML', reply_markup=markup)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    elif 'n_s' in call.data:
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if db.swith_notify(call.from_user.id, index='s'):
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å', callback_data='n_s')]])
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –í–∫–ª—é—á–∏—Ç—å', callback_data='n_s')]])

        # –û—Ç–ø—Ä–∞–≤–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text('''üîî <b>–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>* - [–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ] —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ü–µ–Ω–æ–∫ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:

<blockquote>–°–ø–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏–Ω–∞—á–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ 4!

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify
</blockquote>
–∏–ª–∏

<blockquote>–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Å–µ–≥–æ 0.25 –±–∞–ª–ª–∞ –¥–æ –æ—Ü–µ–Ω–∫–∏ 5, —Å—Ç–æ–∏—Ç –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è!

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify
</blockquote>''', parse_mode='HTML', reply_markup=markup)


    # –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    elif 'hw' in call.data:
        if call.data == 'hw_days':
            markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–ø–Ω', callback_data='hw_0'),
                InlineKeyboardButton(text='–≤—Ç', callback_data='hw_1'),
                InlineKeyboardButton(text='—Å—Ä', callback_data='hw_2'),
                InlineKeyboardButton(text='—á—Ç', callback_data='hw_3'),
                InlineKeyboardButton(text='–ø—Ç', callback_data='hw_4'),
                InlineKeyboardButton(text='—Å–±', callback_data='hw_5')
            ]])

            await call.message.edit_text('–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=markup)

        else:
            index = call.data.replace('hw_', '')
            msg_text = hw(call.from_user.id, index)

            await call.message.edit_text(f'<pre>{msg_text[0]}</pre>', reply_markup=msg_text[1])

    elif 'chatgpt' in call.data:
        await call.message.edit_text('Chatgpt –¥—É–º–∞–µ—Ç...')

        send_text = hw.chatgpt(call.from_user.id, call.data)

        await call.message.edit_text(send_text)